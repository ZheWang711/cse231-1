// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("examples/simple_branch/simple_branch.ll", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 
 // Function Declarations
 
 Function* func__Z1fi = mod->getFunction("_Z1fi");
 if (!func__Z1fi) {
 func__Z1fi = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"_Z1fi", mod); 
 func__Z1fi->setCallingConv(CallingConv::C);
 }
 AttributeSet func__Z1fi_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func__Z1fi_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func__Z1fi->setAttributes(func__Z1fi_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_1 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
 ConstantInt* const_int32_2 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: _Z1fi (func__Z1fi)
 {
  Function::arg_iterator args = func__Z1fi->arg_begin();
  Value* int32_y = args++;
  int32_y->setName("y");
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func__Z1fi,0);
  BasicBlock* label_if_then = BasicBlock::Create(mod->getContext(), "if.then",func__Z1fi,0);
  BasicBlock* label_if_else = BasicBlock::Create(mod->getContext(), "if.else",func__Z1fi,0);
  BasicBlock* label_if_end = BasicBlock::Create(mod->getContext(), "if.end",func__Z1fi,0);
  
  // Block entry (label_entry)
  BinaryOperator* int32_add = BinaryOperator::Create(Instruction::Add, const_int32_1, int32_y, "add", label_entry);
  ICmpInst* int1_cmp = new ICmpInst(*label_entry, ICmpInst::ICMP_SGT, int32_add, const_int32_2, "cmp");
  BranchInst::Create(label_if_then, label_if_else, int1_cmp, label_entry);
  
  // Block if.then (label_if_then)
  BinaryOperator* int32_mul = BinaryOperator::Create(Instruction::Mul, const_int32_1, int32_add, "mul", label_if_then);
  BranchInst::Create(label_if_end, label_if_then);
  
  // Block if.else (label_if_else)
  BinaryOperator* int32_mul1 = BinaryOperator::Create(Instruction::Mul, const_int32_2, int32_add, "mul1", label_if_else);
  BranchInst::Create(label_if_end, label_if_else);
  
  // Block if.end (label_if_end)
  PHINode* int32_x_0 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "x.0", label_if_end);
  int32_x_0->addIncoming(int32_mul, label_if_then);
  int32_x_0->addIncoming(int32_add, label_if_else);
  
  PHINode* int32_y_addr_0 = PHINode::Create(IntegerType::get(mod->getContext(), 32), 2, "y.addr.0", label_if_end);
  int32_y_addr_0->addIncoming(int32_y, label_if_then);
  int32_y_addr_0->addIncoming(int32_mul1, label_if_else);
  
  BinaryOperator* int32_add2 = BinaryOperator::Create(Instruction::Add, int32_x_0, int32_y_addr_0, "add2", label_if_end);
  ReturnInst::Create(mod->getContext(), int32_add2, label_if_end);
  
 }
 
 return mod;
}
