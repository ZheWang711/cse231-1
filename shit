 -----Starting Function Pass------ 
 Testing CSE 
First Instruction: 0x3eef7c0 add, 2 arg(s)
Second Instruction: 0x3ef4fc0 icmp, 2 arg(s)
 About to create CSELatticePoint 
 Created CSELatticePoint with address 0x3ef6190
 isBottom 0 isTop 0CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
In operator 
CSELatticePoint: isBottom: 1, isTop: 0 | 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add = add nsw i32 2, %y  @ 0x3eef7c0 
 Input LP representation is: CSELatticePoint: isBottom: 1, isTop: 0 | 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
In cmp instruction 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add1 = add nsw i32 20, %add  @ 0x3ef5100 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add1 = add nsw i32 20, %add@0x3ef5100 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
 } 
About to call visit with 1 arguments 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add2 = add nsw i32 20, %add  @ 0x3ef5210 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add2 = add nsw i32 20, %add@0x3ef5210 -->   %add2 = add nsw i32 20, %add@0x3ef5210, 
 } 
About to call visit with 1 arguments 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add2 = add nsw i32 20, %add@0x3ef5210 -->   %add2 = add nsw i32 20, %add@0x3ef5210, 
 } 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add1 = add nsw i32 20, %add@0x3ef5100 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
 } 
About to call visit with 2 arguments 
phi node has 2 incoming values 
a pair of phi operands compared equal 
sending back1elements 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %x.0 = phi i32 [ %add1, %if.then ], [ %add2, %if.else ]@0x3eef5b0 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
  %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %addb = add nsw i32 2, %y  @ 0x3ef5430 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Instructions are identical when defined 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %x.1 = add nsw i32 20, %add  @ 0x3ef54c0 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add3 = add nsw i32 %x.0, %x.0  @ 0x3ef5550 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
  %add3 = add nsw i32 %x.0, %x.0@0x3ef5550 -->   %add3 = add nsw i32 %x.0, %x.0@0x3ef5550, 
 } 
About to call visit with 1 arguments 
Done with visit 
In operator 
CSELatticePoint: isBottom: 1, isTop: 0 | 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add = add nsw i32 2, %y  @ 0x3eef7c0 
 Input LP representation is: CSELatticePoint: isBottom: 1, isTop: 0 | 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
In cmp instruction 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add1 = add nsw i32 20, %add  @ 0x3ef5100 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add2 = add nsw i32 20, %add  @ 0x3ef5210 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add2 = add nsw i32 20, %add@0x3ef5210 -->   %add2 = add nsw i32 20, %add@0x3ef5210, 
 } 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add1 = add nsw i32 20, %add@0x3ef5100 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
 } 
About to call visit with 2 arguments 
phi node has 2 incoming values 
a pair of phi operands compared equal 
sending back1elements 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %x.0 = phi i32 [ %add1, %if.then ], [ %add2, %if.else ]@0x3eef5b0 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
  %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %addb = add nsw i32 2, %y  @ 0x3ef5430 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Instructions are identical when defined 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %x.1 = add nsw i32 20, %add  @ 0x3ef54c0 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
In operator 
CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
 } 
About to call visit with 1 arguments 
CSEflow visiting a binary operator 
Info_in_casted.size() = 1
Input instruction is:   %add3 = add nsw i32 %x.0, %x.0  @ 0x3ef5550 
 Input LP representation is: CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
 } 
This value is not mapped to anything, therefore we continue analysis 
Done with visit 
Our analysis returned the following: 
  %add = add nsw i32 2, %y --> CSELatticePoint: isBottom: 1, isTop: 0 | 
  %cmp = icmp sgt i32 %add, 10 --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  br i1 %cmp, label %if.then, label %if.else --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  %add1 = add nsw i32 20, %add --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  br label %if.end --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add1 = add nsw i32 20, %add@0x3ef5100 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
 } 
  %add2 = add nsw i32 20, %add --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  br label %if.end --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %add2 = add nsw i32 20, %add@0x3ef5210 -->   %add2 = add nsw i32 20, %add@0x3ef5210, 
 } 
  %x.0 = phi i32 [ %add1, %if.then ], [ %add2, %if.else ] --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %x.0 = phi i32 [ %add1, %if.then ], [ %add2, %if.else ]@0x3eef5b0 -->   %add1 = add nsw i32 20, %add@0x3ef5100, 
  %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  %addb = add nsw i32 2, %y --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  %x.1 = add nsw i32 20, %add --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
 } 
  %add3 = add nsw i32 %x.0, %x.0 --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
 } 
  ret i32 %add3 --> CSELatticePoint: isBottom: 0, isTop: 0 | {   %add = add nsw i32 2, %y@0x3eef7c0 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %addb = add nsw i32 2, %y@0x3ef5430 -->   %add = add nsw i32 2, %y@0x3eef7c0, 
  %x.1 = add nsw i32 20, %add@0x3ef54c0 -->   %x.1 = add nsw i32 20, %add@0x3ef54c0, 
  %add3 = add nsw i32 %x.0, %x.0@0x3ef5550 -->   %add3 = add nsw i32 %x.0, %x.0@0x3ef5550, 
 } 
 -----Ending Function Pass------ 
